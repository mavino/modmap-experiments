name: taxa-mtdna

experiments: |
  lambda:
    import json, os
    with open(os.path.join({metadata_dir!r}, 'mtdna-taxa.json'), 'r') as f:
      metadata = json.load(f)
    exp_options = {{}}
    for group in metadata:
      for subgroup in metadata[group]['interesting_groups']:
        if ' ' in subgroup:
          outer_subgroup_name = subgroup.split(' ')[0]
          outer_subgroup_contains = [outer_subgroup_name]
          outer_subgroup_not_contains = [subgroup]
        else:
          outer_subgroup_name = group
          outer_subgroup_contains = []
          outer_subgroup_not_contains = [subgroup]
        exp_options[subgroup] = {{
          'expand_options': {{
            'k': '1..11'
          }},
          'dataset': {{
            'archive': 'mtdna-all',
            'archive_folder': 'all',
            'metadata': 'mtdna-taxa'
          }},
          'groups': {{
            subgroup: {{
              'base_group': group,
              'name_contains': [subgroup],
              'name_not_contains': []
            }},
            '{{}}, not {{}}'.format(outer_subgroup_name, subgroup): {{
              'base_group': group,
              'name_contains': outer_subgroup_contains,
              'name_not_contains': outer_subgroup_not_contains
            }}
          }}
        }}
    return exp_options

steps:
  - type: select
    pick_group: |
      lambda metadata, group_options:
        return [x for x in metadata[group_options['base_group']]['sequences']
                        if (not group_options['name_contains'] or any(n in x['name'] for n in group_options['name_contains']))
                        and not any(n in x['name'] for n in group_options['name_not_contains'])]

  - type: command
    command: '"{client_dir}/generation_manhat_info" 16 {k} "{fasta_output_dir}" "{output_dir}"'
    save_files: ['manhat.matr', 'info.matr']

  - type: mds
    dists_file: info.matr
    dimensions: 10
    output_file: mds10-info.json

  - type: mds
    dists_file: manhat.matr
    dimensions: 10
    output_file: mds10-manhat.json

  - &classify_options
    type: classify
    features_type: mmg-dists
    features_file: info.matr
    output_file: classification-info.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - linear-svm
      - quadratic-svm
      #- rbf-svm # not very accurate
      - gaussian-naive-bayes
      - decision-tree
      - random-forest
      - logistic-regression
      - nearest-centroid-mean
      #- neural-network # not very accurate
      - nearest-centroid-median

  - type: classify
    features_type: mmg-dists
    features_file: manhat.matr
    output_file: classification-manhat.json
    <<: *classify_options

  - type: plots
    mds_file: mds10-manhat.json
    output_file: plots_logistic-regression.nb
    accuracy_type: top1
    classification_file: classification-manhat.json
    classifier_name: logistic-regression
