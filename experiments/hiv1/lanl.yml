name: hiv1-lanl

experiments:
  subtype: &exp_options
    expand_options: &expand_options
      k: 1..11
      min_group_pts:
        - 18 # 26 with rc/9 without
        - 50 # 16 with rc/8 without
      include_recombinants: [true, false]
    dataset:
      archive: hiv1
      archive_folder: lanl
      metadata: hiv1-lanl
    selection_key: subtype
    groups: |
      lambda:
        import collections, json, os
        with open(os.path.join({metadata_dir!r}, {dataset[metadata]!r} + '.json'), 'r') as f:
          metadata = json.load(f)
        counts = collections.Counter(x[{selection_key!r}] for x in metadata)
        return {{v: {{'selection_key': {selection_key!r}, 'values': [v]}} for v in counts if v and counts[v] >= {min_group_pts}}}

  A-vs-B-vs-C:
    <<: *exp_options
    expand_options:
      k: 1..11
    include_recombinants: false
    groups:
      A:
        selection_key: subtype
        values: [A1, A2, A3, A4, A6]
      B:
        selection_key: subtype
        values: [B]
      C:
        selection_key: subtype
        values: [C]

  year:
    <<: *exp_options
    expand_options:
      <<: *expand_options
      min_group_pts:
        - 10 # 30 with rc/30 without
        - 100 # 18 with rc/13 without
    selection_key: year

  country:
    <<: *exp_options
    expand_options:
      <<: *expand_options
      min_group_pts:
        - 10 # 49 with rc/35 without
        - 40 # 30 with rc/22 without
        - 100 # 15 with rc/8 without
    selection_key: country

  recombinant-vs-normal:
    <<: *exp_options
    expand_options:
      k: 1..11
    include_recombinants: true
    groups:
      recombinant:
        selection_key: recombinant
        values: [true]
      normal:
        selection_key: recombinant
        values: [false]

steps:
  - type: select
    pick_group: |
      lambda metadata, group_options:
        return [x for x in metadata if ({include_recombinants} or not x['recombinant']) and
                                       x[group_options['selection_key']] in group_options['values']]

  - type: command
    command: '"{client_dir}/generation_manhat_info" 16 {k} "{fasta_output_dir}" "{output_dir}"'
    save_files: ['manhat.matr', 'info.matr']

  - type: mds
    dists_file: info.matr
    dimensions: 10
    output_file: mds10-info.json

  - type: mds
    dists_file: manhat.matr
    dimensions: 10
    output_file: mds10-manhat.json

  - &classify_options
    type: classify
    features_type: mmg-dists
    features_file: info.matr
    output_file: classification-info.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - linear-svm
      - quadratic-svm
      #- rbf-svm # not very accurate
      - gaussian-naive-bayes
      - decision-tree
      - random-forest
      - logistic-regression
      - nearest-centroid-mean
      #- neural-network # not very accurate
      - nearest-centroid-median

  - type: classify
    features_type: mmg-dists
    features_file: manhat.matr
    output_file: classification-manhat.json
    <<: *classify_options
