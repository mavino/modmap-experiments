name: nuclear-one-vs-one

experiments: !!omap
  - human-vs-chimp:
      expand_options: &expand_options
        k: 8..11
        sample_len: [50000, 100000, 150000, 1000000, 2000000, 4000000]
        num_samples: [5, 10]
        no_copy: true
      groups:
        human:
          dataset:
            archive: genomes-animals-h_n
            metadata: nuclear-animals
          species: Homo sapiens
        chimp:
          dataset:
            archive: genomes-animals-o_z
            metadata: nuclear-animals
          species: Pan troglodytes

  - human-vs-human:
      expand_options: *expand_options
      groups:
        human1:
          dataset:
            archive: genomes-animals-h_n
            metadata: nuclear-animals
          species: Homo sapiens
        human2:
          dataset:
            archive: genomes-animals-h_n
            metadata: nuclear-animals
          species: Homo sapiens

steps:
  - type: select
    pick_group: |
      lambda metadata, group_options:
        seq_metadata = [x for x in metadata[group_options['species']]['sequences']
                              if x['type'] == 'chromosome' or x['type'] == 'linkage group']
        for x in seq_metadata:
          x['filename'] = group_options['species'] + '/nuclear/' + x['id'] + '.fasta'
        return seq_metadata
    postprocess: |
      lambda metadata_entry, entry_sequences:
        import random
        seq = entry_sequences[0]
        sample_idxs = random.sample(range(int(len(seq)/{sample_len})), {num_samples})
        samples = []
        for idx in sample_idxs:
          start_idx = {sample_len}*idx
          samples.append((dict(metadata_entry, sample_start=start_idx), [seq[start_idx:start_idx+{sample_len}]]))
        return samples

  - type: command
    command: '"{client_dir}/generation_manhat" 32 {k} "{fasta_output_dir}" "{output_dir}"'
    save_files: ['manhat.matr']

  - type: mds
    dists_file: manhat.matr
    dimensions: 10
    output_file: mds10-manhat.json

  - &classify_options
    type: classify
    features_type: mmg-dists
    features_file: manhat.matr
    output_file: classification-manhat.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - linear-svm
      - quadratic-svm
      #- rbf-svm # not very accurate
      - gaussian-naive-bayes
      - decision-tree
      - random-forest
      - logistic-regression
      - nearest-centroid-mean
      #- neural-network # not very accurate
      - nearest-centroid-median

  - type: plots
    mds_file: mds10-manhat.json
    output_file: plots_random-forest.nb
    accuracy_type: top1
    classification_file: classification-manhat.json
    classifier_name: random-forest
